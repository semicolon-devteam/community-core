{"version":3,"file":"index.js","sources":["../lib/utils/numberUtil.ts"],"sourcesContent":["/**\n * 숫자를 1000 단위로 콤마(,)를 찍어서 문자열로 변환\n * @param num 변환할 숫자 또는 숫자 형태의 문자열\n * @returns 1000단위로 콤마가 포함된 문자열\n */\nexport const formatNumberWithComma = (num: number | string): string => {\n\n    if (num === null || num === undefined || num === '') {\n        return '';\n    }\n    \n    // 숫자나 문자열을 문자열로 변환\n    const numStr: string = typeof num === 'number' ? num.toString() : num;\n    \n    // 소수점이 있는 경우 처리\n    const parts = numStr.split('.');\n    \n    // 정수 부분에 3자리마다 콤마 추가\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    \n    // 소수점이 있으면 다시 합치고, 없으면 정수 부분만 반환\n    return parts.length > 1 ? parts.join('.') : parts[0];\n};\n\n/**\n * 문자열에서 콤마를 제거하고 숫자로 변환\n * @param str 콤마가 포함된 문자열\n * @returns 콤마가 제거된 숫자\n */\nexport const removeCommaFromString = (str: string): number => {\n  if (!str) return 0;\n  return parseFloat(str.replace(/,/g, ''));\n};\n"],"names":["num","parts","toString","split","replace","length","join"],"mappings":"2CAKsCA,IAElC,GAAIA,SAA6C,KAARA,EACrC,MAAO,GAIX,MAGMC,GAHgC,iBAARD,EAAmBA,EAAIE,WAAaF,GAG7CG,MAAM,KAM3B,OAHAF,EAAM,GAAKA,EAAM,GAAGG,QAAQ,wBAAyB,KAG9CH,EAAMI,OAAS,EAAIJ,EAAMK,KAAK,KAAOL,EAAM"}